#!/usr/bin/env python
"""
Script to add a sample job to the database.
Run this to populate the database with a realistic job for testing.
"""

import os
from dotenv import load_dotenv
import json

# Load environment variables
load_dotenv()

# Import after environment variables are loaded
from app import db, create_app
from models import Job, Recruiter, JobToken

def add_sample_job():
    """Add a sample job to the database"""
    app = create_app()
    
    with app.app_context():
        # Check if we already have a recruiter to assign the job to
        recruiter = Recruiter.query.first()
        
        if not recruiter:
            print("Error: No recruiter found in database. Please create a recruiter first.")
            return
        
        # Sample job data
        job_data = {
            "title": "Senior Python Developer",
            "description": """
We are looking for a Senior Python Developer to join our dynamic team. The ideal candidate will have extensive experience building scalable web applications using Python and related frameworks like Flask or Django.

Responsibilities:
- Design, develop, and maintain Python-based applications
- Write clean, maintainable, and efficient code
- Work with front-end developers to integrate user-facing elements
- Optimize applications for maximum speed and scalability
- Implement security and data protection measures
- Debug and fix issues as they arise

Requirements:
- 5+ years of experience with Python
- Strong understanding of web frameworks (Flask, Django)
- Experience with databases (PostgreSQL, MongoDB)
- Knowledge of front-end technologies (JavaScript, HTML, CSS)
- Familiarity with version control systems (Git)
- Experience with RESTful APIs and microservices architecture
- Strong problem-solving skills and attention to detail
- Excellent communication and teamwork skills
            """,
            "location": "San Francisco, CA (Remote Option Available)",
            "experience": "5+ years",
            "education": "Bachelor's degree in Computer Science or related field",
            "job_type": "Full-time",
            "salary_range": "$120,000 - $160,000 per year",
            "company": "TechInnovate Solutions",
            "required_skills": ["Python", "Flask", "Django", "PostgreSQL", "RESTful APIs", "Git"],
            "preferred_skills": ["Docker", "Kubernetes", "AWS", "Microservices", "CI/CD", "React"],
            "recruiter_id": recruiter.id,
            "status": "active"
        }
        
        # Check if this job already exists
        existing_job = Job.query.filter_by(
            title=job_data["title"],
            company=job_data["company"],
            recruiter_id=recruiter.id
        ).first()
        
        if existing_job:
            print(f"Sample job '{job_data['title']}' already exists.")
            return existing_job
        
        # Create the job
        job = Job(**job_data)
        
        # Create a dummy embedding (would normally be generated by OpenAI)
        job.embedding = [0.01] * 1536  # OpenAI embeddings are 1536 dimensions
        
        # Add to database
        db.session.add(job)
        db.session.commit()
        
        print(f"Added sample job: {job_data['title']}")
        return job

if __name__ == "__main__":
    add_sample_job()